import json
from http.server import HTTPServer, BaseHTTPRequestHandler

from datetime import date, datetime
from decimal import Decimal

# Database configuration           
DB_CONFIG = {
    "host": "localhost",  # Your database host
    "user": "root",       # Your database username
    "password": "root",   # Your database password
    "database": "realestate"  # Your database name
}

# Custom JSON Encoder to handle date and Decimal types
class CustomJSONEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, (date, datetime)):
            return obj.isoformat()  # Convert date/datetime to ISO format string
        if isinstance(obj, Decimal):
            return float(obj)  # Convert Decimal to float
        return super().default(obj)

# Function to get a database connection
def get_db_connection():
    return mysql.connector.connect(**DB_CONFIG)

# Request handler for HTTP server
class RequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        print("Request path:", self.path)

        try:
            # Establish DB connection
            conn = get_db_connection()
            cursor = conn.cursor(dictionary=True)
            result = None  # Initialize result variable

            if self.path.startswith("/owners/"):
                # Fetch specific owner by ID
                owner_id = self.path.split("/")[-1]
                cursor.execute("SELECT * FROM owners WHERE owner_id = %s", (owner_id,))
                result = cursor.fetchone()
            elif self.path.startswith("/properties/"):
                # Fetch specific property by ID
                property_id = self.path.split("/")[-1]
                cursor.execute("SELECT * FROM properties WHERE property_id = %s", (property_id,))
                result = cursor.fetchone()
            elif self.path.startswith("/agents/"):
                # Fetch specific agent by ID
                agent_id = self.path.split("/")[-1]
                cursor.execute("SELECT * FROM agents WHERE agent_id = %s", (agent_id,))
                result = cursor.fetchone()
            elif self.path.startswith("/property_viewings/"):
                # Fetch property viewing by ID
                viewing_id = self.path.split("/")[-1]
                cursor.execute("SELECT * FROM property_viewings WHERE viewing_id = %s", (viewing_id,))
                result = cursor.fetchone()
            elif self.path.startswith("/sales/"):
                # Fetch sale by ID
                sale_id = self.path.split("/")[-1]
                cursor.execute("SELECT * FROM sales WHERE sale_id = %s", (sale_id,))
                result = cursor.fetchone()
            else:
                # Fetch all data (for properties, owners, etc.)
                if self.path == "/owners":
                    cursor.execute("SELECT * FROM owners")
                    result = cursor.fetchall()
                elif self.path == "/properties":
                    cursor.execute("SELECT * FROM properties")
                    result = cursor.fetchall()
                elif self.path == "/agents":
                    cursor.execute("SELECT * FROM agents")
                    result = cursor.fetchall()
                elif self.path == "/property_viewings":
                    cursor.execute("SELECT * FROM property_viewings")
                    result = cursor.fetchall()
                elif self.path == "/sales":
                    cursor.execute("SELECT * FROM sales")
                    result = cursor.fetchall()

            if result is None:
                # Return an error response if no results were found
                self.send_response(404)
                self.send_header("Content-Type", "application/json")
                self.end_headers()
                error_message = {"error": "Resource not found"}
                self.wfile.write(json.dumps(error_message).encode())
                return

            # Convert the result into a JSON response using the custom encoder
            response_body = json.dumps(result, cls=CustomJSONEncoder)

            # Send response headers and body
            self.send_response(200)
            self.send_header("Content-Type", "application/json")
            self.end_headers()
            self.wfile.write(response_body.encode())  # Write JSON response

        except Exception as e:
            # Handle errors and send a 500 response
            self.send_error(500, str(e))

        finally:
            # Ensure the cursor and connection are closed properly
            cursor.close()
            conn.close()

# Function to run the HTTP server
def run(server_class=HTTPServer, handler_class=RequestHandler, port=8080):
    server_address = ("", port)
    httpd = server_class(server_address, handler_class)
    print(f"Server running on port {port}...")
    httpd.serve_forever()

# Start the server if this script is run
if __name__ == "__main__":
    run()
